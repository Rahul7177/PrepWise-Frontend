{
                    id: 2,
                    title: "Modular Arithmetic",
                    content: (
                        <>
                            <h3 className="note-subheading">Modular Arithmetic</h3>
                            <p className="note-text">Modular arithmetic is arithmetic for integers where numbers wrap around after reaching a modulus.</p>
                            <ul className="note-list">
                                <li>It is similar to clock arithmetic.</li>
                                <li>Used in cryptography for reducing numbers to manageable sizes (e.g., RSA).</li>
                            </ul>
                            <p className="note-example"><b>Example:</b> 13 mod 12 = 1 (like 1 o'clock).</p>
                        </>
                    )
                },
                {
                    id: 3,
                    title: "Euclidean Algorithm",
                    content: (
                        <>
                            <h3 className="note-subheading">Euclidean Algorithm</h3>
                            <p className="note-text">The Euclidean Algorithm is a method for finding the greatest common divisor (GCD) of two integers. It’s used in cryptography for calculating the multiplicative inverse in RSA encryption.</p>
                            <h4 className="note-subheading">Steps:</h4>
                            <ul className="note-list">
                                <li>Divide the larger number by the smaller one.</li>
                                <li>Repeat using the remainder until the remainder is zero.</li>
                                <li>The last non-zero remainder is the GCD.</li>
                            </ul>
                            <p className="note-example"><b>Example:</b> To find the GCD of 56 and 15, divide repeatedly: GCD(56, 15) = 1.</p>
                        </>
                    )
                },
                {
                    id: 4,
                    title: "Primality Testing",
                    content: (
                        <>
                            <h3 className="note-subheading">Primality Testing</h3>
                            <p className="note-text">Primality testing determines whether a number is prime. Prime numbers are essential in cryptography for generating keys in encryption algorithms.</p>
                            <h4 className="note-subheading">Fermat's Little Theorem</h4>
                            <p className="note-text">If p is a prime number, and a is an integer such that 1 ≤ a ≤ p, then: a^(p-1) ≡ 1 (mod p).</p>
                            <h4 className="note-subheading">Euler's Theorem</h4>
                            <p className="note-text">Generalizing Fermat's theorem: If two numbers are coprime, then a^φ(n) ≡ 1 (mod n), where φ(n) is Euler's totient function.</p>
                            <ul className="note-list">
                                <li>RSA encryption uses large prime numbers to generate keys.</li>
                                <li>Primality tests help find suitable prime numbers for cryptographic keys.</li>
                            </ul>
                        </>
                    )
                },
                {
                    id: 5,
                    title: "Chinese Remainder Theorem",
                    content: (
                        <>
                            <h3 className="note-subheading">Chinese Remainder Theorem (CRT)</h3>
                            <p className="note-text">CRT solves systems of simultaneous congruences with different moduli. It’s used in cryptography to speed up RSA encryption and decryption.</p>
                            <h4 className="note-subheading">How CRT Works:</h4>
                            <ul className="note-list">
                                <li>CRT finds a number that satisfies multiple modular equations.</li>
                                <li>It breaks down large numbers into smaller, manageable parts.</li>
                            </ul>
                            <p className="note-example"><b>Example:</b> Solving for x in the system of equations:
                                <ul>
                                    <li>x ≡ 2 (mod 3)</li>
                                    <li>x ≡ 3 (mod 5)</li>
                                    <li>x ≡ 2 (mod 7)</li>
                                </ul>
                            </p>
                        </>
                    )
                },
                {
                    id: 6,
                    title: "Discrete Logarithms",
                    content: (
                        <>
                            <h3 className="note-subheading">Discrete Logarithms</h3>
                            <p className="note-text">The Discrete Logarithm Problem (DLP) involves finding the exponent in the equation g^x ≡ h (mod p). It’s fundamental to many cryptographic systems, such as Diffie-Hellman and ElGamal.</p>
                            <h4 className="note-subheading">Importance in Cryptography</h4>
                            <ul className="note-list">
                                <li>DLP is difficult to solve, making it useful in encryption systems.</li>
                                <li>It underpins the security of Diffie-Hellman key exchange and ElGamal encryption.</li>
                            </ul>
                            <p className="note-example"><b>Example:</b> If g = 5, p = 23, and h = 8, solving for x in the equation 5^x ≡ 8 (mod 23) is a difficult problem, ensuring secure communication.</p>
                        </>
                    )
                }
            ]
        },